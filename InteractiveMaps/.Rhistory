#load libraries
library(acs)
library(tigris)
library(leaflet)
library(mapview)
library(stringr)
library(dplyr)
options(tigris_use_cache = TRUE) #I tend to cache the tigris data here so that my computer is not constantly fetching the data; it slows it down otherwise. You do you.
leaflet() %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addProviderTiles("CartoDB.Positron")
#The tigris package makes it easy to grab Census shapefiles at various levels, from tracts and zipcodes all the way up to national borders. First we look up the appropriate codes.
lookup_code("New York", "New York")
lookup_code("New York", "Kings")
lookup_code("New York", "Queens")
lookup_code("New York", "Bronx")
lookup_code("New York", "Richmond")
# The summary below shows the data associated with each polygon (e.g., the GEOID and  NAME). I can use this to build the Census tract GEOIDs that I will later join my data by, as it is in the same form.
nyc_tracts <- tracts(state = '36', county = c('061','047','081','005','085'))
# Here's what that looks like: a real map structure! Yes this is very exciting to me.
plot(nyc_tracts)
#bringing in my own data
housing_data <- read.csv("TTCDATA.csv")
class(housing_data$pct.pov)
#mutating the percentage variables
housing_data_clean <- housing_data %>%
mutate(pct.asian=pct.asian*100,
pct.black=pct.black*100,
pct.latinx=pct.latinx*100,
pct.white=pct.white*100,
pct.pov=(as.numeric(housing_data$pct.pov)*100),
pct.min= pct.black+pct.latinx+pct.asian)
summary(housing_data_clean)
class(housing_data_clean$GEOID)
housing_data_clean$GEOID <- as.character(housing_data_clean$GEOID)
#merging the data!
mydatamerged <- right_join(nyc_tracts, housing_data_clean, "GEOID", "GEOID")
#making sure all is in order...
summary(mydatamerged)
#yay it worked!
#renaming my dataframe
nyc_housingtracts <- mydatamerged
#time to start mapping!
#mapping poverty
mypopup_pov <- paste0("GEOID: ", nyc_housingtracts$GEOID, "<br>", "Poverty Rate: ", round(nyc_housingtracts$pct.pov,0))
#colors and bin setting
mypovbin <-c(0,10,20,30,40,50,60,70,80,90)
mypal_pov <- colorBin(
palette = "OrRd",
domain = nyc_housingtracts$pct.pov,
bins=mypovbin
)
#using leaflet to generate my map
povmap<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = nyc_housingtracts,
fillColor = ~mypal_pov(pct.pov),
color = "#b2aeae", #drawing the lines for the Census tract boundaries -- have to use hex colors for this
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = mypopup_pov) %>%
addLegend(pal = mypal_pov, #drawing the legend
values = nyc_housingtracts$pct.pov,
position = "bottomright",
title = "Poverty Rate",
labFormat = labelFormat(suffix = "%"))
povmap
#mapping racial and ethnic groups! I'll start with white
mypopup_white <- paste0("GEOID: ", nyc_housingtracts$GEOID, "<br>", "Percent White ", round(nyc_housingtracts$pct.white,0))
#colors and bins
mybins=c(0,10,20,30,40,50,60,70,80, 90, 100)
mypal_white <- colorBin(
palette = "PuRd",
domain = nyc_housingtracts$pct.white,
bins=mybins
)
leaflet
whitemap<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = nyc_housingtracts,
fillColor = ~mypal_white(pct.white),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = mypopup_white) %>%
addLegend(pal = mypal_white,
values = nyc_housingtracts$pct.white,
position = "bottomright",
title = "Percent White",
labFormat = labelFormat(suffix = " %"))
whitemap
#mapping black population
mypopup_black <- paste0("GEOID: ", nyc_housingtracts$GEOID, "<br>", "Percent Black ", round(nyc_housingtracts$pct.black,0))
#colors and bins
mybins=c(0,10,20,30,40,50,60,70,80, 90, 100)
mypal_black <- colorBin(
palette = "YlOrBr",
domain = nyc_housingtracts$pct.black,
bins=mybins
)
leaflet
blackpopmap<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = nyc_housingtracts,
fillColor = ~mypal_black(pct.black),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = mypopup_black) %>%
addLegend(pal = mypal_black,
values = nyc_housingtracts$pct.black,
position = "bottomright",
title = "Percent Black",
labFormat = labelFormat(suffix = " %"))
blackpopmap
#mapping Asian
mypopup_asian <- paste0("GEOID: ", nyc_housingtracts$GEOID, "<br>", "Percent Asian ", round(nyc_housingtracts$pct.asian,0))
#colors
mybins=c(0,10,20,30,40,50,60,70,80, 90, 100)
mypal_asian <- colorBin(
palette = "BuGn",
domain = nyc_housingtracts$pct.asian,
bins=mybins
)
leaflet
asianmap<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = nyc_housingtracts,
fillColor = ~mypal_asian(pct.asian),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = mypopup_asian) %>%
addLegend(pal = mypal_asian,
values = nyc_housingtracts$pct.asian,
position = "bottomright",
title = "Percent Asian",
labFormat = labelFormat(suffix = " %"))
asianmap
#mapping Latinx
mypopup_latinx <- paste0("GEOID: ", nyc_housingtracts$GEOID, "<br>", "Percent Latinx ", round(nyc_housingtracts$pct.latinx,0))
#colors
mybins=c(0,10,20,30,40,50,60,70,80, 90, 100)
mypal_latinx <- colorBin(
palette = "BuPu",
domain = nyc_housingtracts$Tpct.latinx,
bins=mybins
)
leaflet
latinxmap<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = nyc_housingtracts,
fillColor = ~mypal_latinx(pct.latinx),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = mypopup_latinx) %>%
addLegend(pal = mypal_latinx,
values = nyc_housingtracts$pct.latinx,
position = "bottomright",
title = "Percent Latinx",
labFormat = labelFormat(suffix = " %"))
latinxmap
#loading the file
monuments <-read.csv("8-29 Monuments Revgeocoded.csv")
monuments %>%
leaflet() %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
addLayersControl(baseGroups = c("Toner Lite", "World Imagery"))
monuments %>%
leaflet() %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
addLayersControl(baseGroups = c("Toner Lite", "World Imagery")) %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude,
popup = ~Monument_Name)
