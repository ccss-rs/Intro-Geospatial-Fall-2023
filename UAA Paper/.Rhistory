labs(y = "Total Units",
x = "Poverty Rate") +
theme_bw()
ggsave("city.png", width = 6, height = 5)
#graphing distribution by race/ethnicity
race_labels <- list('pct.white' = "Percent White", 'pct.black' = "Percent Black", 'pct.asian' = "Percent Asian", 'pct.latinx' = "Percent Latinx")
race_label <- function(variable, value){
return(race_labels[value])
}
ggplot(df_plot %>%  filter(TotalUnits > 0),
aes(x=log(pct_pop_gp), y=log(TotalUnits),
color = race_grp, size=pct.pov, fill = race_grp)) +
geom_jitter(alpha = 0.3) +
geom_smooth(method = "lm") +
labs(x = "Percent Population Group",
fill = "Race Group", color = "Race Group",
size = "Poverty Rate",  y = "Total Income Restricted Units") +
scale_fill_brewer(palette = "Dark2",
labels = c("Asian", "Black", "Latinx", "White"))  +
scale_color_brewer(palette = "Dark2",
labels = c("Asian", "Black", "Latinx", "White")) +
facet_wrap(~ race_grp, labeller = race_label, scales = "free_x") +
theme_bw()
ggsave("facet_race_1.png", width = 8, height = 8)
#regression time!
model4 <- lm(TotalUnits  ~ pct.pov + pct_pop_gp*factor(race_grp), data= df_plot)
summary(model4)
#creating a table using Stargazer
var_names <- c("Poverty Rate",
"Percent Population Group",
"Percent Black",
"Percent Latinx",
"Percent White",
"Poverty*Percent Black",
"Poverty*Percent Latinx",
"Poverty*Percent White")
stargazer(model4,
covariate.labels = var_names,
dep.var.labels = "Income Restricted Units",
title = "OLS Regression",
out = "regressions.tex",
label = "tab:regs",
single.row = TRUE
)
#predicted probability
df_plot
xhyp <- df_plot %$%
expand.grid(
pct.pov = mean(pct.pov, na.rm = T),
pct_pop_gp = seq(0,1, .1),
race_grp = c("pct.asian", "pct.black", "pct.latinx", "pct.white")
)
preds <- predict(model4, xhyp, interval = "confidence", se.fit = T, level = .9)
preds_df <- cbind(xhyp, preds)
preds_df
#plotting predicted probability
race_labels2 <- list('pct.asian' = "Percent Asian", 'pct.black' = "Percent Black", 'pct.latinx' = "Percent Latinx", 'pct.white' = "Percent White")
race_label2 <- function(variable, value){
return(race_labels2[value])
}
ggplot(preds_df, aes(x = pct_pop_gp, y = fit.fit,
fill = factor(race_grp),
color = factor(race_grp),
ymin = fit.lwr,
ymax = fit.upr)) +
geom_line() +
geom_ribbon(alpha = .5, labels = c("Asian", "Black", "Latinx", "White")) +
facet_wrap(~ race_grp, labeller = race_label2, scales = "free_y") +
labs(x = "Percent Population", fill = "Race", color = "Race", y = "Pr(Building More Income Restricted Units)") +
scale_fill_brewer(palette = "Dark2",
labels = c("Asian", "Black", "Latinx", "White"))  +
scale_color_brewer(palette = "Dark2",
labels = c("Asian", "Black", "Latinx", "White")) +
theme_bw()
ggsave("preds.png", width = 8, height = 8)
#loading libraries
library(tidyverse)
library(dplyr)
library(ggplot2)
library(magrittr)
library(margins)
library(stargazer)
library(prediction)
#read dataset
housing_data <- read.csv("housing_datav52.csv")
glimpse(housing_data)
#creating a percent minority variable
housing_data_clean <- housing_data %>%
mutate(pct.min= pct.black+pct.latinx+pct.asian)
summary(housing_data_clean)
#grouping by race
df_plot <-  housing_data_clean %>%
gather("race_grp", "pct_pop_gp",
-GEOID, -Borough, -ELI,
-VLI, -LI, -TotalUnits,
-TractWhite, -TractBlack, -TractAsian,
-TractLatinx, -TractIncome, -TractPoverty,
-pct.pov, -pct.min
)
glimpse(df_plot)
head(df_plot)
# Graphing NYC government's argument -- development looking at poverty rate only
ggplot(df_plot %>% filter(TotalUnits > 0),
aes(x=(pct.pov), y=log(TotalUnits))) +
geom_jitter() +
geom_smooth(method = "lm") +
labs(y = "Total Units",
x = "Poverty Rate") +
theme_bw()
ggsave("city.png", width = 6, height = 5)
#graphing distribution by race/ethnicity
race_labels <- list('pct.white' = "Percent White", 'pct.black' = "Percent Black", 'pct.asian' = "Percent Asian", 'pct.latinx' = "Percent Latinx")
race_label <- function(variable, value){
return(race_labels[value])
}
ggplot(df_plot %>%  filter(TotalUnits > 0),
aes(x=log(pct_pop_gp), y=log(TotalUnits),
color = race_grp, size=pct.pov, fill = race_grp)) +
geom_jitter(alpha = 0.3) +
geom_smooth(method = "lm") +
labs(x = "Percent Population Group",
fill = "Race Group", color = "Race Group",
size = "Poverty Rate",  y = "Total Income Restricted Units") +
scale_fill_brewer(palette = "Dark2",
labels = c("Asian", "Black", "Latinx", "White"))  +
scale_color_brewer(palette = "Dark2",
labels = c("Asian", "Black", "Latinx", "White")) +
facet_wrap(~ race_grp, labeller = race_label, scales = "free_x") +
theme_bw()
ggsave("facet_race_new.png", width = 8, height = 8)
#regression time!
model4 <- lm(TotalUnits  ~ pct.pov + pct_pop_gp*factor(race_grp), data= df_plot)
summary(model4)
#creating a table using Stargazer
var_names <- c("Poverty Rate",
"Percent Population Group",
"Percent Black",
"Percent Latinx",
"Percent White",
"Poverty*Percent Black",
"Poverty*Percent Latinx",
"Poverty*Percent White")
stargazer(model4,
covariate.labels = var_names,
dep.var.labels = "Income Restricted Units",
title = "OLS Regression",
out = "regressions.tex",
label = "tab:regs",
single.row = TRUE
)
#predicted probability
df_plot
xhyp <- df_plot %$%
expand.grid(
pct.pov = mean(pct.pov, na.rm = T),
pct_pop_gp = seq(0,1, .1),
race_grp = c("pct.asian", "pct.black", "pct.latinx", "pct.white")
)
preds <- predict(model4, xhyp, interval = "confidence", se.fit = T, level = .9)
preds_df <- cbind(xhyp, preds)
preds_df
#plotting predicted probability
race_labels2 <- list('pct.asian' = "Percent Asian", 'pct.black' = "Percent Black", 'pct.latinx' = "Percent Latinx", 'pct.white' = "Percent White")
race_label2 <- function(variable, value){
return(race_labels2[value])
}
ggplot(preds_df, aes(x = pct_pop_gp, y = fit.fit,
fill = factor(race_grp),
color = factor(race_grp),
ymin = fit.lwr,
ymax = fit.upr)) +
geom_line() +
geom_ribbon(alpha = .5, labels = c("Asian", "Black", "Latinx", "White")) +
facet_wrap(~ race_grp, labeller = race_label2, scales = "free_y") +
labs(x = "Percent Population", fill = "Race", color = "Race", y = "Pr(Building More Income Restricted Units)") +
scale_fill_brewer(palette = "Dark2",
labels = c("Asian", "Black", "Latinx", "White"))  +
scale_color_brewer(palette = "Dark2",
labels = c("Asian", "Black", "Latinx", "White")) +
theme_bw()
ggsave("preds_new.png", width = 8, height = 8)
#Install packages
install.packages("acs")
install.packages("tigris")
install.packages("leaflet")
install.packages("mapview")
install.packages("stringr")
install.packages("tidyverse")
install.packages("sp")
install.packages("tmap")
install.packages("maptools")
install.packages("sf")
install.packages("raster")
install.packages("dplyr")
#load libraries
library(acs)
library(tigris)
library(leaflet)
library(mapview)
library(stringr)
library(tidyverse)
library(sp)
library(tmap)
library(tmaptools)
library(sf)
library(dplyr)
library(raster)
options(tigris_use_cache = TRUE)
shapename <- read_sf('../nyct2010_22a/nyct2010.shp')
getwd()
shapename <- read_sf('../../nyct2010_22a/nyct2010.shp')
shapename <- read_sf('./nyct2010_22a/nyct2010.shp')
shapename <- read_sf('../nyct2010_22a/nyct2010.shp')
shapename <- read_sf('../nyct2010_22a/nyct2010.shp')
#bringing in my own data
housing_data <- read.csv("TTCDATA.csv")
housing_data$TractPoverty <- as.numeric(housing_data$TractPoverty)
housing_data$pct.pov <- as.numeric(housing_data$pct.pov)
housing_data$GEOID <- as.character(housing_data$GEOID)
glimpse(housing_data)
#mutate percentage variables
housing_data_clean <- housing_data
summary(housing_data_clean)
shapename <- read_sf('../nyct2010_22b/nyct2010.shp')
leaflet() %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addProviderTiles("CartoDB.Positron")
nyc_tracts <- tracts(state = "NY",  county = c('061','047','081','005','085'), cb = TRUE,
class = "sp")
#The tigris package makes it easy to grab Census shapefiles at various levels, from tracts and zipcodes all the way up to national borders. First we look up the appropriate codes.
lookup_code("New York", "New York")
lookup_code("New York", "Kings")
lookup_code("New York", "Queens")
lookup_code("New York", "Bronx")
lookup_code("New York", "Richmond")
class(nyc_tracts)
plot(nyc_tracts)
view(nyc_tracts)
# Then we download the data and take a look at it. The summary below shows the data associated with each polygon (e.g., the GEOID and  NAME). We can access data columns via nyc_tracts@data.
nyc_tracts <- tracts(state = '36', county = c('061','047','081','005','085'))
summary(nyc_tracts)
plot(nyc_tracts)
#bringing in my own data
housing_data <- read.csv("TTCDATA.csv")
housing_data$TractPoverty <- as.numeric(housing_data$TractPoverty)
housing_data$pct.pov <- as.numeric(housing_data$pct.pov)
housing_data$GEOID <- as.character(housing_data$GEOID)
glimpse(housing_data)
#mutate percentage variables
housing_data_clean <- housing_data
summary(housing_data_clean)
#merging!
mydatamerged <- geo_join(nyc_tracts, housing_data_clean, "GEOID", "GEOID", how = 'inner')
summary(mydatamerged)
qtm(shapename)
nycmaps <- left_join(shapename,housing_data_clean,by="GEOID")
View(shapename)
View(housing_data_clean)
#merging!
mydatamerged <- geo_join(nyc_tracts, housing_data_clean, "GEOID", "GEOID", how = 'inner')
summary(mydatamerged)
qtm(shapename)
#nycmaps <- left_join(shapename,housing_data_clean,by="GEOID")
View(nycmaps)
View(mydatamerged)
#rename the df
nyc_housingtracts <- mydatamerged
#mapping poverty
mypopup_pov <- paste0("GEOID: ", nyc_housingtracts$GEOID, "<br>", "Poverty Rate: ", round(nyc_housingtracts$pct.pov,0))
#colors
mypal_pov <- colorNumeric(
palette = "YlGnBu",
domain = nyc_housingtracts$pct.pov
)
#leaflet
povmap<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = nyc_housingtracts,
fillColor = ~mypal_pov(pct.pov),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = mypopup_pov) %>%
addLegend(pal = mypal_pov,
values = nyc_housingtracts$pct.pov,
position = "bottomright",
title = "Percent Poverty",
labFormat = labelFormat(suffix = "%"))
povmap
#mapping units
mypopup_units <- paste0("GEOID: ", nyc_housingtracts$GEOID, "<br>", "Total Income Restricted Units ", round(nyc_housingtracts$TotalUnits,0))
?paste0
#mapping units
mypopup_units <- paste0("GEOID: ", nyc_housingtracts$GEOID, "<br>", "Total Income Restricted Units ")
round(nyc_housingtracts$TotalUnits,0)
View(nyc_housingtracts)
#mapping units
mypopup_units <- paste0("GEOID: ", nyc_housingtracts$GEOID, "<br>", "Total Income Restricted Units ")
round(nyc_housingtracts$LIUnits,0)
#colors
mypal_units <- colorNumeric(
palette = "YlGnBu",
domain = nyc_housingtracts$TotalUnits
)
leaflet
unitmap<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = nyc_housingtracts,
fillColor = ~mypal_units(TotalUnits),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = mypopup_units) %>%
addLegend(pal = mypal_units,
values = nyc_housingtracts$TotalUnits,
position = "bottomright",
bins = 7,
title = "Income Restricted Units",
labFormat = labelFormat(suffix = " units"))
#mapping units
mypopup_units <- paste0("GEOID: ", nyc_housingtracts$GEOID, "<br>", "Total Income Restricted Units ", round(nyc_housingtracts$LIUnits,0))
#colors
mypal_units <- colorNumeric(
palette = "YlGnBu",
domain = nyc_housingtracts$TotalUnits
)
leaflet
unitmap<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = nyc_housingtracts,
fillColor = ~mypal_units(TotalUnits),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = mypopup_units) %>%
addLegend(pal = mypal_units,
values = nyc_housingtracts$TotalUnits,
position = "bottomright",
bins = 7,
title = "Income Restricted Units",
labFormat = labelFormat(suffix = " units"))
#mapping units
mypopup_units <- paste0("GEOID: ", nyc_housingtracts$GEOID, "<br>", "Total Income Restricted Units ", round(nyc_housingtracts$LIUnits,0))
#colors
mypal_units <- colorNumeric(
palette = "YlGnBu",
domain = nyc_housingtracts$TotalUnits
)
#leaflet
unitmap<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = nyc_housingtracts,
fillColor = ~mypal_units(TotalUnits),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = mypopup_units) %>%
addLegend(pal = mypal_units,
values = nyc_housingtracts$TotalUnits,
position = "bottomright",
bins = 7,
title = "Income Restricted Units",
labFormat = labelFormat(suffix = " units"))
#mapping units
mypopup_units <- paste0("GEOID: ", nyc_housingtracts$GEOID, "<br>", "Total Income Restricted Units ", round(nyc_housingtracts$LIUnits,0))
#colors
mypal_units <- colorNumeric(
palette = "YlGnBu",
domain = nyc_housingtracts$TotalUnits
)
#leaflet
unitmap<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = nyc_housingtracts,
fillColor = ~mypal_units(LIUnits),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = mypopup_units) %>%
addLegend(pal = mypal_units,
values = nyc_housingtracts$LIUnits,
position = "bottomright",
bins = 7,
title = "Income Restricted Units",
labFormat = labelFormat(suffix = " units"))
unitmap
#Install packages
install.packages("acs")
install.packages("tigris")
install.packages("leaflet")
install.packages("mapview")
install.packages("stringr")
install.packages("tidyverse")
install.packages("sp")
install.packages("tmap")
install.packages("maptools")
install.packages("sf")
install.packages("raster")
install.packages("dplyr")
#load libraries
library(acs)
library(tigris)
library(leaflet)
library(mapview)
library(stringr)
library(tidyverse)
library(sp)
library(tmap)
library(tmaptools)
library(sf)
library(dplyr)
library(raster)
options(tigris_use_cache = TRUE)
shapename <- read_sf('../nyct2010_22b/nyct2010.shp')
leaflet() %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addProviderTiles("CartoDB.Positron")
nyc_tracts <- tracts(state = "NY",  county = c('061','047','081','005','085'), cb = TRUE,
class = "sp")
#The tigris package makes it easy to grab Census shapefiles at various levels, from tracts and zipcodes all the way up to national borders. First we look up the appropriate codes.
lookup_code("New York", "New York")
lookup_code("New York", "Kings")
lookup_code("New York", "Queens")
lookup_code("New York", "Bronx")
lookup_code("New York", "Richmond")
class(nyc_tracts)
plot(nyc_tracts)
view(nyc_tracts)
#The tigris package makes it easy to grab Census shapefiles at various levels, from tracts and zipcodes all the way up to national borders. First we look up the appropriate codes.
lookup_code("New York", "New York")
lookup_code("New York", "Kings")
lookup_code("New York", "Queens")
lookup_code("New York", "Bronx")
lookup_code("New York", "Richmond")
class(nyc_tracts)
plot(nyc_tracts)
head(nyc_tracts)
# Then we download the data and take a look at it. The summary below shows the data associated with each polygon (e.g., the GEOID and  NAME). We can access data columns via nyc_tracts@data.
nyc_tracts <- tracts(state = '36', county = c('061','047','081','005','085'))
summary(nyc_tracts)
plot(nyc_tracts)
#bringing in my own data
housing_data <- read.csv("TTCDATA.csv")
housing_data$TractPoverty <- as.numeric(housing_data$TractPoverty)
housing_data$pct.pov <- as.numeric(housing_data$pct.pov)
housing_data$GEOID <- as.character(housing_data$GEOID)
glimpse(housing_data)
#mutate percentage variables
housing_data_clean <- housing_data
summary(housing_data_clean)
#merging!
mydatamerged <- geo_join(nyc_tracts, housing_data_clean, "GEOID", "GEOID", how = 'inner')
summary(mydatamerged)
qtm(shapename)
#nycmaps <- left_join(shapename,housing_data_clean,by="GEOID")
#View(nycmaps)
#rename the df
nyc_housingtracts <- mydatamerged
#mapping poverty
mypopup_pov <- paste0("GEOID: ", nyc_housingtracts$GEOID, "<br>", "Poverty Rate: ", round(nyc_housingtracts$pct.pov,0))
#colors
mypal_pov <- colorNumeric(
palette = "YlGnBu",
domain = nyc_housingtracts$pct.pov
)
#leaflet
povmap<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = nyc_housingtracts,
fillColor = ~mypal_pov(pct.pov),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = mypopup_pov) %>%
addLegend(pal = mypal_pov,
values = nyc_housingtracts$pct.pov,
position = "bottomright",
title = "Percent Poverty",
labFormat = labelFormat(suffix = "%"))
povmap
#mapping units
mypopup_units <- paste0("GEOID: ", nyc_housingtracts$GEOID, "<br>", "Total Income Restricted Units ", round(nyc_housingtracts$LIUnits,0))
#colors
mypal_units <- colorNumeric(
palette = "YlGnBu",
domain = nyc_housingtracts$TotalUnits
)
#leaflet
unitmap<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = nyc_housingtracts,
fillColor = ~mypal_units(LIUnits),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = mypopup_units) %>%
addLegend(pal = mypal_units,
values = nyc_housingtracts$LIUnits,
position = "bottomright",
bins = 7,
title = "Income Restricted Units",
labFormat = labelFormat(suffix = " units"))
unitmap
